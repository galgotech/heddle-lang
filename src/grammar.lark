start: program

program: (statement)*

statement: import_statement | schema_statement | step_statement | workflow_definition
import_statement: "import" ESCAPED_STRING IDENTIFIER

schema_statement: "schema" IDENTIFIER "=" schema_expression
schema_expression: schema_type_dict
schema_type_dict: "{" [schema_type_pair ","?("," schema_type_pair ","?)*] "}"
schema_type_pair: IDENTIFIER ":" schema_type
schema_type: schema_type_dict
        | "int"
        | "string"
        | "float"
        | "bool"
        | "timestamp"

step_statement: "step" IDENTIFIER schema_use "->" schema_use "=" import_use step_expression_config
schema_use: IDENTIFIER
step_expression_config: dict

error_statement: "error" IDENTIFIER "=" import_use error_expression_config
error_expression_config: dict

workflow_definition: "workflow" IDENTIFIER "?" error_use scope
scope: "{" (let_statement | pipeline_statement)* scope_return? "}"
scope_return: let_read | dataframe | pipeline_statement

let_statement: "let" IDENTIFIER "=" let_expression
let_expression: dataframe | pipeline_statement | let_read

pipeline_statement: (dataframe | workflow_access_let_use | let_use)? ("|" pipeline_step_handler )+ "?" error_use?
pipeline_step_handler: import_use | step_use | prql

workflow_access_let_use: IDENTIFIER "." IDENTIFIER
let_use: IDENTIFIER
import_use: IDENTIFIER "." IDENTIFIER
step_use: IDENTIFIER
error_use: IDENTIFIER
prql: "(" PRQL_DEFINITION ")"

dataframe: "[" [dataframe_dict ("," dataframe_dict ","?)*] "]"
dataframe_dict: "{" [dataframe_pair ","? ("," dataframe_pair ","?)*] "}"
dataframe_pair: IDENTIFIER ":" dataframe_primitive
dataframe_primitive: ESCAPED_STRING
        | SIGNED_NUMBER
        | TRUE
        | FALSE
        | NULL

value: dict
        | list
        | ESCAPED_STRING
        | SIGNED_NUMBER
        | TRUE
        | FALSE
        | NULL
        | prql
list: "[" [value ","?("," value ","?)*] "]"
dict: "{" [pair ","?("," pair ","?)*] "}"
pair: IDENTIFIER ":" value

TRUE: "true"
FALSE: "false"
NULL: "null"
PRQL_DEFINITION: /[^)]+/
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/
COMMENT: /\/\/[^\n]*/

%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS -> WHITE_SPACE
%import common.NEWLINE

%ignore WHITE_SPACE
%ignore NEWLINE
%ignore COMMENT